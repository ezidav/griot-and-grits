WEBVTT

NOTE
This file was generated by Descript <www.descript.com>

00:00:01.570 --> 00:00:02.230
Hello, everyone.

00:00:02.550 --> 00:00:07.470
Welcome to today's talk on improving
code quality, velocity, and team

00:00:07.470 --> 00:00:09.170
cohesion with peer programming.

00:00:10.050 --> 00:00:13.149
I'm Demetria Ramsour, and
I have 20 plus years in the

00:00:13.160 --> 00:00:14.500
project management profession.

00:00:15.040 --> 00:00:18.579
I joined Red Hat in 2020 as a
technical project manager in the

00:00:18.590 --> 00:00:20.794
engineering organization working with.

00:00:21.045 --> 00:00:25.945
Product managers and engineering teams
to deliver features and to continuously

00:00:25.945 --> 00:00:27.355
improve the way that we work.

00:00:27.955 --> 00:00:32.794
In July, 2023, I became an engineering
manager and I currently have six

00:00:32.824 --> 00:00:37.064
engineers that develop features
and provide operational support

00:00:37.064 --> 00:00:38.654
for one of our managed services.

00:00:40.260 --> 00:00:43.890
While working as a technical project
manager and now as an engineering

00:00:43.890 --> 00:00:48.549
manager, I've witnessed a push to
have engineers increase velocity

00:00:48.549 --> 00:00:50.149
to deliver features faster.

00:00:51.070 --> 00:00:55.920
Delivering quality code at accelerated
speeds is challenging for many engineers.

00:00:56.420 --> 00:00:59.589
It's even more challenging in
an environment where teams are

00:00:59.589 --> 00:01:01.640
distributed, they're working remotely.

00:01:01.949 --> 00:01:03.809
It makes collaboration difficult.

00:01:04.230 --> 00:01:08.530
So today I want to talk about The Peer
Programming concept that my team is

00:01:08.530 --> 00:01:13.930
using to improve co quality, increase
velocity, and improve team cohesion.

00:01:15.440 --> 00:01:19.379
My goal is that you'll leave this
presentation with an understanding

00:01:19.379 --> 00:01:23.219
of what Peer Programming is, an
understanding of the benefits as well as

00:01:23.219 --> 00:01:27.700
the misconceptions of Peer Programming,
and leave with a few tips to get started

00:01:27.700 --> 00:01:29.240
on your Peer Programming journey.

00:01:31.805 --> 00:01:34.925
Peer programming is an agile
software development technique

00:01:34.945 --> 00:01:37.995
where two or more developers
work together to solve a problem.

00:01:38.545 --> 00:01:42.655
Developers share ideas in real time
and develop code synchronously.

00:01:43.424 --> 00:01:47.135
One of the developers has their hands
on the keyboard and types the code

00:01:47.145 --> 00:01:51.485
while explaining their thought process,
and then the other developer watches,

00:01:51.495 --> 00:01:56.255
helps to review code, raises any
concerns, and helps to identify errors.

00:01:56.835 --> 00:02:00.880
And then the two, uh, Individuals
swap roles periodically

00:02:00.880 --> 00:02:02.740
throughout that process.

00:02:04.130 --> 00:02:06.200
Pair programming is not a new concept.

00:02:06.220 --> 00:02:09.039
It's actually one of the principles
of extreme programming that's

00:02:09.039 --> 00:02:11.270
been around since about 1996.

00:02:11.710 --> 00:02:15.479
And the tenet within extreme
programming states that two

00:02:15.480 --> 00:02:19.520
developers will always work together.

00:02:20.085 --> 00:02:21.635
When working on production code.

00:02:22.155 --> 00:02:25.155
Now that means that two
developers must always pair

00:02:25.155 --> 00:02:26.515
when working on production code.

00:02:27.644 --> 00:02:32.635
So ironically, you know, when I went
for new hire training for my very first

00:02:32.635 --> 00:02:37.554
job many moons ago, the concept of
extreme programming was introduced to me.

00:02:37.785 --> 00:02:43.105
However, I've never worked on a team
or worked with a team that had pair

00:02:43.105 --> 00:02:44.954
programming as part of their culture.

00:02:44.964 --> 00:02:45.464
So.

00:02:46.100 --> 00:02:50.859
In July 2023, after I moved into
the my management position, and I

00:02:50.859 --> 00:02:56.219
met with my team, Lee, you know, my
team Lee asked me to support getting

00:02:56.219 --> 00:02:57.549
the team to start programming.

00:02:57.549 --> 00:03:03.089
So without a doubt, I said yes, because I
was very interested in seeing a technique

00:03:03.089 --> 00:03:04.949
and approach that I had heard about.

00:03:05.455 --> 00:03:09.525
in action and seeing how my team could
benefit from using this approach.

00:03:09.525 --> 00:03:13.295
So I was very happy to promote
and support the idea of pair

00:03:13.295 --> 00:03:14.695
programming within my team.

00:03:16.225 --> 00:03:19.435
Because pair programming,
it really has many benefits.

00:03:19.465 --> 00:03:23.704
And in this section, we'll talk about
four of the key benefits of pair

00:03:23.704 --> 00:03:28.415
programming and how those can be.

00:03:28.625 --> 00:03:32.825
Achieve those benefits can be achieved
while pair programming and as we

00:03:32.825 --> 00:03:34.385
talk about each of these benefits.

00:03:34.425 --> 00:03:41.204
I'll also share Comments from my team
about their experience with with pair

00:03:41.204 --> 00:03:46.105
programming and What they saw in terms
of each of these benefits, because I did

00:03:46.105 --> 00:03:51.345
pull my team after we had, uh, five peer
programming for about four, four months

00:03:51.375 --> 00:03:56.035
to get their feedback to see if they were
seeing the outcomes that, you know, I,

00:03:56.105 --> 00:04:00.045
I had expected and that the team lead
had expected by them peer programming.

00:04:01.394 --> 00:04:02.254
The first.

00:04:03.130 --> 00:04:07.940
Item or benefit was increased velocity
and velocity can be increased a

00:04:08.030 --> 00:04:09.420
number of ways by pair program.

00:04:09.420 --> 00:04:11.760
And one is just getting on block faster.

00:04:13.070 --> 00:04:16.300
Not everyone on the team asked
for help when they need help.

00:04:16.759 --> 00:04:17.740
That's just simple.

00:04:17.799 --> 00:04:21.910
Some people just feel
uncomfortable asking for help.

00:04:21.959 --> 00:04:27.140
And so they might spend more time
than they need to trying to figure out

00:04:27.150 --> 00:04:33.080
how to solve an issue by themselves
versus just asking somebody for help.

00:04:33.130 --> 00:04:36.280
Because we know that sometimes
having that additional set of eyes,

00:04:36.590 --> 00:04:40.600
somebody can see things that you
may not see because you're so close.

00:04:40.965 --> 00:04:41.985
You know, to the code.

00:04:41.995 --> 00:04:44.155
It might be something small
that you're overlooking.

00:04:44.155 --> 00:04:50.205
So the idea is that having that second
set of eyes, that additional peering

00:04:50.205 --> 00:04:54.114
with somebody, they would help to
see something that you don't see.

00:04:54.465 --> 00:04:58.814
You also have the opportunity to
discuss what's being blocked and get a

00:04:58.814 --> 00:05:02.315
perspective on how to address that from
the person that you're peering with.

00:05:02.935 --> 00:05:03.675
So.

00:05:04.665 --> 00:05:08.635
Adopting pair programming for the
team would just make it easier for

00:05:09.345 --> 00:05:14.525
the team to discuss any issues that
were blocking them and essentially

00:05:14.525 --> 00:05:19.055
help them to accelerate, um, their
ability to complete the work faster.

00:05:21.584 --> 00:05:26.104
Another way that Velocity has increased
was just getting code changes approved

00:05:26.104 --> 00:05:30.775
faster and with pair programming, there's
two developers working on code together.

00:05:30.835 --> 00:05:33.755
That means that there are two individuals,
at least at a minimum, that's fine.

00:05:33.775 --> 00:05:36.895
familiar with, with the
changes, with the code.

00:05:37.265 --> 00:05:42.615
And that means that one individual
is able to then go and approve

00:05:42.635 --> 00:05:46.095
any changes for that code without
spending a lot of time trying to

00:05:46.105 --> 00:05:47.895
get, you know, up on the context.

00:05:47.904 --> 00:05:50.754
So pair programming helps with that.

00:05:50.764 --> 00:05:54.325
Getting code changes
approved faster, getting.

00:05:54.980 --> 00:05:59.200
Getting the items approved faster
helps to increase the velocity,

00:05:59.200 --> 00:06:00.620
getting the changes in faster.

00:06:01.140 --> 00:06:06.570
And third, uh, velocity is increased
by identifying code errors faster

00:06:06.600 --> 00:06:09.890
in real time in the pairing session
because there are two people there.

00:06:10.659 --> 00:06:17.530
Usually the second person, somebody is
able to identify bugs or typos in the code

00:06:17.530 --> 00:06:23.229
or other issues in the code, they could be
identified as part of that peering session

00:06:23.320 --> 00:06:25.249
just by having that second set of eyes.

00:06:25.259 --> 00:06:29.319
So all of those things will help with
increased velocity and some of the

00:06:29.329 --> 00:06:31.599
comments from my team around this too.

00:06:32.329 --> 00:06:36.770
that I received is that it just simply,
it saves time, pair programming saves time

00:06:36.980 --> 00:06:40.980
and helps you on board those situations
that are unworkable because you're

00:06:40.989 --> 00:06:45.039
able having a conversation somebody's
there watching, helping, you're sharing

00:06:45.039 --> 00:06:50.199
ideas, you're, you're identifying issues
faster so it saves time and you get

00:06:50.199 --> 00:06:51.999
the feedback right there in real time.

00:06:52.580 --> 00:06:57.070
Uh, that it helps complete projects faster
when you pair, which is what we expect.

00:06:57.330 --> 00:07:00.260
You complete the project faster because
you're pairing, which increases the

00:07:00.260 --> 00:07:02.549
velocity, which is what we're looking at.

00:07:03.140 --> 00:07:07.819
Another comment received was the
errors or mistakes they get called

00:07:07.830 --> 00:07:11.450
sooner, which is definitely one of the
benefits and something that can help

00:07:11.689 --> 00:07:16.020
increase the velocity, catching those
errors sooner, getting them addressed.

00:07:17.969 --> 00:07:22.509
Another comment that was made was
around the fact that you reduce errors

00:07:22.539 --> 00:07:26.590
in debugging time by peering because
there's that second set of eyes there

00:07:26.829 --> 00:07:29.510
watching to point out those things.

00:07:30.660 --> 00:07:33.960
And lastly, that it's faster development.

00:07:33.969 --> 00:07:34.719
You're getting.

00:07:35.069 --> 00:07:39.500
Feedback on your PR is faster because
there's one or more individuals in the

00:07:39.500 --> 00:07:41.480
pairing session familiar with the code.

00:07:41.830 --> 00:07:45.739
You're able to get things approved
faster, but also it's a tighter

00:07:45.740 --> 00:07:48.990
feedback loop because everybody, you
know, you're peering with somebody.

00:07:48.990 --> 00:07:53.029
So you're getting that feedback
in real time and all of that

00:07:53.029 --> 00:07:54.569
helps to increase velocity.

00:07:55.180 --> 00:08:01.520
Another benefit of pair programming is
improved code and code can be improved by

00:08:01.789 --> 00:08:04.099
the sharing of ideas when you're peering.

00:08:04.800 --> 00:08:07.410
There's a person there to
provide different perspectives

00:08:07.410 --> 00:08:09.040
on how to address a solution.

00:08:09.320 --> 00:08:14.870
And these discussions allow for, again,
those different perspectives, even

00:08:14.870 --> 00:08:18.250
better perspectives, um, to be revealed.

00:08:18.480 --> 00:08:22.439
And sometimes a perspective or an
approach reveal might be better than

00:08:22.639 --> 00:08:24.550
one that you originally had in mind.

00:08:24.950 --> 00:08:29.530
Sometimes they can be combined to
make a better, stronger solution.

00:08:30.650 --> 00:08:35.260
Um, and when you think about the fact
that coding is more than just coding,

00:08:35.260 --> 00:08:41.769
that it really is coming up with
approaches to solving, um, solving

00:08:41.769 --> 00:08:46.630
problems, uh, designs to solving
problems, you'll see that the sharing

00:08:46.630 --> 00:08:48.689
of ideas really helps in this area.

00:08:51.870 --> 00:08:55.900
Code can be improved by
being more efficient as well.

00:08:56.090 --> 00:08:58.920
And when you pair, there's
somebody there who.

00:08:59.215 --> 00:09:03.995
Might be able to provide a perspective
or insight on how you can write the code

00:09:04.005 --> 00:09:07.405
differently to achieve the same outcome.

00:09:07.775 --> 00:09:11.565
So that's 1 way that you can
approve code quality is just even

00:09:11.565 --> 00:09:15.445
having more efficient, solid code.

00:09:16.220 --> 00:09:20.310
that can scale, which can be achieved
by by peer programming, having that

00:09:20.829 --> 00:09:24.650
second set of eyes or more people
participating in that peering session

00:09:24.650 --> 00:09:26.150
that could provide that input.

00:09:26.520 --> 00:09:30.939
And some of the feedback I received from
my team around improved code quality

00:09:31.280 --> 00:09:37.930
is that Again, that hearing the, the
different ideas about the solutions that,

00:09:37.940 --> 00:09:43.959
that really helped and you can figure
out which one is the best and have a

00:09:43.959 --> 00:09:46.619
good solid idea to move forward with.

00:09:48.140 --> 00:09:52.079
Other feedback I received was having
that second set of eyes and multiple

00:09:52.080 --> 00:09:55.860
perspectives that it really was
helpful in improving that code.

00:09:56.485 --> 00:09:57.635
Because it is more ideas.

00:09:57.635 --> 00:10:00.245
There's more things to think about
or things you may not have even

00:10:00.245 --> 00:10:05.215
thought of that need to be considered
as, uh, as part of the solution.

00:10:05.544 --> 00:10:09.545
So that's why it helps to have those
different and varying perspectives.

00:10:09.925 --> 00:10:17.584
And then lastly, again, there was a
comment around the ideas that you receive

00:10:17.594 --> 00:10:23.655
when you're pairing that they result in
better code and a better code design.

00:10:24.055 --> 00:10:24.545
So.

00:10:24.920 --> 00:10:26.500
Better code and better design.

00:10:26.530 --> 00:10:32.070
So it really my team is really finding
that peering is beneficial to them.

00:10:33.410 --> 00:10:39.260
Another benefit of pair programming
is building team cohesion and pair

00:10:39.270 --> 00:10:40.650
programming can help with this.

00:10:40.669 --> 00:10:44.480
Because when you're appearing, you
have an opportunity to learn about your

00:10:44.500 --> 00:10:47.180
teammates with the pairing sessions.

00:10:47.900 --> 00:10:50.710
You get to learn about each
other's strengths and weaknesses.

00:10:51.220 --> 00:10:54.390
You have an opportunity to see
how your teammate does things,

00:10:54.400 --> 00:10:56.050
like what tools do they use?

00:10:56.290 --> 00:10:57.960
What commands do they use?

00:10:58.130 --> 00:11:02.370
What is their thought process or
reasoning behind the things that they do?

00:11:02.370 --> 00:11:04.710
And you might even learn something
that you wouldn't have even thought

00:11:04.720 --> 00:11:06.419
to ask because it's so subtle.

00:11:06.759 --> 00:11:12.220
So having those peering sessions allow you
to work more closely with the teammate.

00:11:12.510 --> 00:11:15.199
It allows you to get more
comfortable, you know, helping

00:11:15.200 --> 00:11:16.710
each other and working together.

00:11:17.415 --> 00:11:21.105
So we saw peer programming as a
way to really build relationships

00:11:21.145 --> 00:11:26.225
amongst the team, which will
help build that team cohesion.

00:11:28.215 --> 00:11:30.775
Peering also helps the
team feel more comfortable.

00:11:30.935 --> 00:11:36.564
So you have opportunities for the team to
peer and work together on the same ethic.

00:11:36.624 --> 00:11:38.825
And that's, that was one of
the, our same feature, that was

00:11:38.835 --> 00:11:40.145
one of the things that we did.

00:11:40.445 --> 00:11:43.115
But it, you can set things up.

00:11:43.609 --> 00:11:47.720
In appearing so that the whole team is
able to collaborate together on a feature.

00:11:47.980 --> 00:11:51.540
So the whole team is connected because
they all contributed, hopefully,

00:11:51.540 --> 00:11:52.759
to the success of a feature.

00:11:52.760 --> 00:11:58.079
And everyone has a understanding of
end to end of how this feature works.

00:11:58.610 --> 00:12:03.270
So, it helps the team feel more
connected by appearing and even though.

00:12:03.910 --> 00:12:08.510
usually with peering is two individuals
working together on a topic.

00:12:08.530 --> 00:12:10.449
Other members of the team can join in.

00:12:10.460 --> 00:12:15.160
They can join in to be, you know,
active participants or to just listen.

00:12:15.180 --> 00:12:19.629
And even with listening, though, they're
learning and understanding thought

00:12:19.660 --> 00:12:24.410
processes and how to better problem
solve by listening to the conversation.

00:12:24.410 --> 00:12:28.230
So it's an opportunity to to
learn and grow by peering.

00:12:28.570 --> 00:12:29.310
And

00:12:31.375 --> 00:12:36.385
Some of the comments around team,
team cohesion that my team made was

00:12:36.395 --> 00:12:42.175
that it just brings the team closer,
which really helps because it, the

00:12:42.185 --> 00:12:47.175
comment here is that it remote working
environment can make people feel isolated.

00:12:47.175 --> 00:12:49.604
So parent really helps
bring the team together.

00:12:49.604 --> 00:12:51.819
Like they're working in
a virtual environment.

00:12:52.120 --> 00:12:52.820
Office.

00:12:53.589 --> 00:12:57.450
That's a wonderful benefit
of pair programming.

00:12:57.490 --> 00:13:01.090
Another comment on the same vein
is that that whole team working

00:13:01.090 --> 00:13:03.229
together was was really big.

00:13:03.270 --> 00:13:08.320
They, the pairs of more have dedicated
meetings set up working on specific tasks.

00:13:08.730 --> 00:13:11.420
But this really helps to
build the team cohesion.

00:13:11.860 --> 00:13:12.740
And lastly,

00:13:15.620 --> 00:13:18.870
just collaborating with the
teammates in general helps

00:13:19.370 --> 00:13:20.860
bring the team closer together.

00:13:24.504 --> 00:13:28.834
The last benefit is really like
a software programming as a way

00:13:30.594 --> 00:13:32.454
of, uh, excuse me for a second

00:13:34.465 --> 00:13:35.625
need to drink water,

00:13:38.735 --> 00:13:42.714
but we saw it as a mentoring
opportunity, and I encourage my senior

00:13:42.714 --> 00:13:46.625
members of the team to invite others
to pair with them as they worked on

00:13:46.655 --> 00:13:49.674
items so that they could share their
welcome knowledge and experience.

00:13:49.675 --> 00:13:50.024
So.

00:13:51.435 --> 00:13:55.585
I ask my senior members to not only
invite people to share with them,

00:13:55.895 --> 00:14:00.635
but also ask other people if there's
something that they want to peer on.

00:14:01.094 --> 00:14:05.464
Because oftentimes, some people might
be a little shy about saying that they

00:14:05.464 --> 00:14:08.974
need help, but if somebody asks them
if they want to peer on something,

00:14:10.410 --> 00:14:15.810
More than likely, they'll say yes, and
some of the comments that I received

00:14:15.810 --> 00:14:20.300
from my team around this is just,
you know, caring saves learning time.

00:14:20.329 --> 00:14:23.489
It results in better quality
and knowledge and experience.

00:14:23.499 --> 00:14:29.490
So mentoring, sharing of ideas
helps you keep the ego in check.

00:14:30.090 --> 00:14:32.009
You realize you don't know
everything that there's something

00:14:32.009 --> 00:14:33.409
to be learned from everybody.

00:14:33.409 --> 00:14:38.650
There are different perspectives and
ideas by sharing, and you just can

00:14:38.650 --> 00:14:42.749
improve your problem solving skills
enhanced by just working together.

00:14:43.730 --> 00:14:45.819
All wonderful benefits
of peer programming.

00:14:48.100 --> 00:14:52.970
Now, there are misconceptions,
too, that might make people a

00:14:52.970 --> 00:14:54.760
little reluctant to peer program.

00:14:56.209 --> 00:14:58.889
And I'd like to talk
about four misconceptions.

00:15:00.580 --> 00:15:03.610
No time to help others slows you down.

00:15:04.030 --> 00:15:05.740
No feeling of accomplishment.

00:15:06.300 --> 00:15:10.139
And some people just see that it might
not be helpful due to mismatch skills.

00:15:10.139 --> 00:15:12.139
But all of these really
are misconceptions.

00:15:12.139 --> 00:15:16.030
And while my team is using pair
programming and they want to

00:15:16.179 --> 00:15:19.829
move forward, kind of formalizing
some of our processes around it.

00:15:20.950 --> 00:15:24.219
To ensure that the whole team
continues to pair program.

00:15:24.459 --> 00:15:29.500
Now they have their own hesitation before
trying it and experiencing the benefits.

00:15:29.509 --> 00:15:33.959
So let's talk about each one of these
and I'll share some, some of the

00:15:33.959 --> 00:15:35.990
specific misconceptions from my team.

00:15:37.550 --> 00:15:40.760
And I guess that the first one was
just feeling that people really

00:15:40.800 --> 00:15:43.800
don't have time to work with you.

00:15:43.800 --> 00:15:47.930
Specifically, everyone has
their own project to work on.

00:15:47.930 --> 00:15:51.050
So with their own projects,
they have their own deadlines.

00:15:51.360 --> 00:15:54.519
So the feeling is that people
will be less likely to help.

00:15:55.140 --> 00:15:59.795
Also, there's a large feeling that No
one wants to tie up another engineer

00:15:59.795 --> 00:16:03.645
for long stretches of time again because
people have work that they need to do.

00:16:03.645 --> 00:16:08.275
They have other priorities, but while
this might make people reluctant to

00:16:08.314 --> 00:16:13.415
try a pair programming, the thought
that people don't have time to help.

00:16:14.055 --> 00:16:16.665
And when reality people
do have time to help.

00:16:16.704 --> 00:16:17.134
If you.

00:16:17.594 --> 00:16:20.305
ask somebody to help, they will help.

00:16:20.305 --> 00:16:25.044
Never have I ever asked somebody for help
and they not help me and never has someone

00:16:25.065 --> 00:16:27.944
asked me for help and I didn't help them.

00:16:27.954 --> 00:16:33.334
So it's truly a misconception and
it might just, you know, be people

00:16:33.334 --> 00:16:35.175
just are reluctant to ask for help.

00:16:35.175 --> 00:16:36.685
It kind of goes back to that.

00:16:36.944 --> 00:16:39.345
You know, they don't want to ask
to help because they don't, they

00:16:39.345 --> 00:16:42.814
don't want to bother and keep
people from doing other things.

00:16:42.885 --> 00:16:45.430
But Reality is people will help.

00:16:45.780 --> 00:16:46.959
So that is a misconception.

00:16:46.959 --> 00:16:48.020
It has to be overcome.

00:16:48.350 --> 00:16:52.409
Another misconception is the
feeling that You'll be slowed down.

00:16:53.030 --> 00:16:55.970
So specific comments from my team
around this is that working in

00:16:55.970 --> 00:16:59.720
peers would just slow down their
progress in their development speed.

00:17:00.689 --> 00:17:04.710
Another engineer commented that, you
know, it's just going to take a bit of

00:17:04.710 --> 00:17:08.089
time to give somebody the context that
they need to be able to contribute.

00:17:08.109 --> 00:17:09.959
And this could take a long time.

00:17:09.959 --> 00:17:14.369
Well, we know that while there
are misconceptions that peering

00:17:14.760 --> 00:17:18.740
might slow you down, in reality,
it helps increase velocity and

00:17:18.740 --> 00:17:21.310
improve, you know, code quality.

00:17:21.825 --> 00:17:26.685
So it really is something that you have
to experience to see how it works and

00:17:26.685 --> 00:17:30.715
that this really is a misconception that
just might impact your ability to try it.

00:17:30.725 --> 00:17:33.984
But once you try it, you'll see
that it really is a misconception.

00:17:35.815 --> 00:17:40.565
Accomplishments, um, feelings around
accomplishments was really about that,

00:17:42.324 --> 00:17:45.995
that sense of accomplishment that you get
from solving the problem yourself that

00:17:45.995 --> 00:17:47.605
you won't get that for pair programming.

00:17:47.605 --> 00:17:52.514
So that might make people reluctant
to try it or this other comment that

00:17:52.514 --> 00:17:56.985
my engineer, one of my engineers made
about, you know, their own abilities.

00:17:56.985 --> 00:17:59.275
They want to prove that they
can do it themselves and

00:17:59.275 --> 00:18:00.495
make their own achievements.

00:18:00.514 --> 00:18:03.625
And actually, they're just a little
reluctant to ask for help, too.

00:18:03.625 --> 00:18:09.925
But we know that when someone pairs
with you to help you get unblocked

00:18:10.624 --> 00:18:14.855
or complete your goal or reach
your goal, you're happy about that.

00:18:15.639 --> 00:18:19.750
If somebody asks you for help and
you help unblock them and help that

00:18:19.750 --> 00:18:23.300
individual reach their goal, there's
something that, you know, you feel

00:18:23.300 --> 00:18:26.610
a sense of pride in the fact that
you contributed and you helped them.

00:18:28.080 --> 00:18:33.980
And when the whole team works
together to solve a problem and.

00:18:34.625 --> 00:18:35.885
They feel good about that.

00:18:35.885 --> 00:18:42.325
So there is a sense of accomplishment
that comes by completing tasks as

00:18:42.325 --> 00:18:46.304
a pair or as a group or enabling
somebody to be successful.

00:18:47.174 --> 00:18:49.744
There's a big feeling of
accomplishment in that.

00:18:49.754 --> 00:18:56.195
So, um, so this is a misconception again,
something you have to try, um, and see.

00:18:56.615 --> 00:19:01.795
That that you'll feel differently
once once you pair and lastly is this

00:19:02.105 --> 00:19:08.535
idea of mismatch skills and one of
the comments from my engineers is that

00:19:09.625 --> 00:19:14.074
they worry about being judged or not
being able to contribute equally well

00:19:14.074 --> 00:19:17.694
the whole point of pair programming
is to get a different perspective or

00:19:17.694 --> 00:19:22.594
diverse perspectives on things so you
people will have varying skills it's

00:19:22.594 --> 00:19:27.344
not meant for everybody to be the same
you know you learn by your differences.

00:19:28.620 --> 00:19:32.629
Another comment around this
was that, oh, peering could

00:19:32.629 --> 00:19:34.259
lead to conflicts in working.

00:19:35.310 --> 00:19:38.429
And people have different working
and coding styles, which might make

00:19:38.429 --> 00:19:39.889
you a little reluctant to reach out.

00:19:39.889 --> 00:19:43.090
I don't know how they work,
but that's part of the point.

00:19:43.559 --> 00:19:46.129
Reaching out, working together,
learning from each other.

00:19:47.719 --> 00:19:51.899
Another engineer commented that one
thing that might make them reluctant

00:19:51.899 --> 00:19:55.120
is just their lack of self confidence
in their own programming skills,

00:19:55.129 --> 00:19:59.289
which they didn't mention that pair
programming kind of helps with that.

00:20:00.310 --> 00:20:03.149
So that's the whole point that with
peer programming is that you do

00:20:03.149 --> 00:20:06.410
peer with somebody who may have a
different perspective, a diverse

00:20:06.410 --> 00:20:11.180
background, a different thoughts
on things, but coming together, you

00:20:11.180 --> 00:20:13.310
know, two are stronger than one.

00:20:13.329 --> 00:20:16.250
So that's the whole point.

00:20:16.845 --> 00:20:17.995
that pair programming.

00:20:17.995 --> 00:20:21.025
Once you try it, you overcome
these misconceptions and

00:20:21.795 --> 00:20:23.035
misconceptions are normal.

00:20:23.035 --> 00:20:24.035
I'll say that again.

00:20:24.065 --> 00:20:27.055
My team at the misconceptions too.

00:20:27.395 --> 00:20:33.014
But after they gave pair program
in a try, they gave it a chance

00:20:33.024 --> 00:20:34.725
and they discovered his advantages.

00:20:34.725 --> 00:20:38.135
So they realized that pair
programming really can improve

00:20:38.145 --> 00:20:40.205
quality through continuous review.

00:20:40.659 --> 00:20:44.870
Uh, you know, getting PRs reviewed
faster, reducing bugs to real time

00:20:44.909 --> 00:20:48.989
error identification and then just
being able to facilitate knowledge

00:20:48.989 --> 00:20:50.629
sharing amongst the team members.

00:20:50.639 --> 00:20:58.539
So they also understood and what they,
uh, understood from pair program is

00:20:58.539 --> 00:21:02.510
that it could alleviate that feeling
of isolation that, that some developers

00:21:02.510 --> 00:21:04.290
experience when they're working along.

00:21:04.310 --> 00:21:08.629
So there's a lot to be gained by
overcoming the misconceptions.

00:21:10.780 --> 00:21:14.360
Well, now that we've covered the
benefits of pair programming and

00:21:14.360 --> 00:21:16.780
looked at the misconceptions,

00:21:18.909 --> 00:21:23.179
I want to share with you kind of how
my team kind of got started in pair

00:21:23.179 --> 00:21:26.999
programming and leave you with some
tips and things to think about as you

00:21:27.000 --> 00:21:29.009
consider your pair programming journey.

00:21:30.849 --> 00:21:32.750
The first item is tools.

00:21:33.655 --> 00:21:38.215
You have need to have a tool that allow
you to screen share and also a place

00:21:38.215 --> 00:21:40.824
where everybody can see the cold cold.

00:21:41.225 --> 00:21:45.695
So in terms of tools, my team
use Google me, they use Google

00:21:45.754 --> 00:21:47.044
me to share their screen.

00:21:47.805 --> 00:21:51.264
Um, and then all the code
within a common repository.

00:21:51.954 --> 00:21:53.444
That was simply that was it.

00:21:54.334 --> 00:21:55.455
Nothing fancy.

00:21:56.084 --> 00:22:00.985
And then in terms of guidance, the only
guidance that my team was given was this

00:22:01.235 --> 00:22:05.294
to switch roles periodically, such that
the driver becomes a navigator and the

00:22:05.294 --> 00:22:10.154
navigator becomes the driver that they
try to limit peer programming sessions and

00:22:10.155 --> 00:22:12.234
keep them to under, you know, two hours.

00:22:12.310 --> 00:22:15.429
I mean, definitely they could go
longer or shorter, but that was

00:22:15.429 --> 00:22:20.270
the guidance that was providing
in terms of stakeholder support.

00:22:21.189 --> 00:22:26.070
Now, this is recommended, especially if
this is you want to try pair programming

00:22:26.080 --> 00:22:32.370
in a team or organization, because you
want somebody to help promote the idea of

00:22:32.370 --> 00:22:40.625
peer programming, um, amongst everybody
and, um, I was a stakeholder for my

00:22:40.625 --> 00:22:46.345
team, and I was very much a supporter,
and every opportunity that I had in

00:22:46.415 --> 00:22:51.255
all the correspondences with my team, I
highly encouraged that they try out Peer

00:22:51.255 --> 00:22:53.105
Programming if they had not tried it.

00:22:54.695 --> 00:22:59.425
And whenever they mentioned that they
had an issue, I always recommended that

00:22:59.425 --> 00:23:04.919
they get that second set of eyes, hint,
hint, Peer Program, to Peer Program.

00:23:05.310 --> 00:23:10.090
Get on block to move that work faster
because I knew some members of my

00:23:10.090 --> 00:23:12.830
team were a bit hesitant to ask
questions when they were blocked.

00:23:12.830 --> 00:23:16.760
So I definitely encouraged and
always recommended that they try to

00:23:16.790 --> 00:23:18.280
pair programming to get on block.

00:23:18.280 --> 00:23:20.230
So that's what the
stakeholder support would do.

00:23:20.260 --> 00:23:23.599
Just to help, you know, promote the idea.

00:23:23.949 --> 00:23:28.310
Uh, amongst the individuals that you
want to try pair programming with.

00:23:30.310 --> 00:23:33.439
Um, next is having a pair
programming champion.

00:23:33.439 --> 00:23:37.500
We found this to be helpful because
it's that pair programming champion

00:23:37.809 --> 00:23:42.829
that would help also promote the
idea, but also set an example for

00:23:42.829 --> 00:23:44.869
what pair programming will look like.

00:23:47.439 --> 00:23:48.940
For my team, it was a team lead.

00:23:49.419 --> 00:23:52.830
Team lead would invite people to pair.

00:23:53.220 --> 00:23:55.790
but also would ask people
if they wanted to pair.

00:23:56.750 --> 00:24:01.660
So by doing this, the team members
were able to experience parent,

00:24:01.710 --> 00:24:04.860
but also were able to start
to see the benefits of parent.

00:24:06.199 --> 00:24:11.030
My team lead even went as far as
to set up a calendar for people to

00:24:11.040 --> 00:24:15.389
schedule time to pair with available
parents slots to encourage them

00:24:15.389 --> 00:24:17.610
to reach out to ask questions.

00:24:17.620 --> 00:24:18.080
So.

00:24:19.470 --> 00:24:23.710
He the team really set the example
and show people what it looked

00:24:23.710 --> 00:24:28.040
like, but also help the team members
start to experience the benefits.

00:24:28.040 --> 00:24:31.090
And once they saw the
benefits and overcame their,

00:24:33.630 --> 00:24:34.159
um,

00:24:36.620 --> 00:24:40.235
yeah, once they saw the benefits,
they wanted to move forward.

00:24:40.235 --> 00:24:43.385
Once they overcame those misconceptions,
it was something they wanted to do

00:24:43.815 --> 00:24:51.395
more of, which led us to experimenting
because once they saw it, we were

00:24:51.395 --> 00:24:55.845
trying to figure out how best to get
people to more do pair programming.

00:24:55.845 --> 00:24:57.004
So we tried a few things.

00:24:57.004 --> 00:24:58.665
One was one sprint.

00:24:58.934 --> 00:25:02.775
We assigned two people to a
task to each task that we had

00:25:02.775 --> 00:25:04.255
and had them pair together.

00:25:05.235 --> 00:25:08.525
Um, for a couple of
sprints, we assigned a task.

00:25:08.790 --> 00:25:12.590
An act told everyone that
you need to peer with someone

00:25:12.640 --> 00:25:15.120
during that sprint on that task.

00:25:16.190 --> 00:25:20.720
And then we've also tried where we
did whole team peering, which is an

00:25:20.720 --> 00:25:24.570
approach that the team really liked
where they all work together on a

00:25:24.570 --> 00:25:29.090
feature and we had pairs of more, they
had dedicated sets of meetings to work

00:25:29.090 --> 00:25:32.949
on specific tasks with one driver and
one or more people there to discuss.

00:25:32.960 --> 00:25:35.650
So they really like that approach.

00:25:36.055 --> 00:25:38.795
But it's about experimenting and
seeing what works best for your team.

00:25:40.215 --> 00:25:45.205
And then continuously improve, because
once you start to see what works,

00:25:45.494 --> 00:25:50.284
then you, you want to iterate on
that process and further refine the

00:25:50.284 --> 00:25:52.004
things that work best for the team.

00:25:52.764 --> 00:25:58.025
Um, my team wants to kind of formalize
more how we do our pair programming.

00:25:58.025 --> 00:26:02.955
They really want to ensure that
we are being real, uh, proactive

00:26:02.955 --> 00:26:06.544
about making sure we do more
whole team pair programming.

00:26:07.715 --> 00:26:10.255
It was something that they
really, really like to do.

00:26:10.285 --> 00:26:13.555
So you continuously improve based
on the feedback from your team.

00:26:14.504 --> 00:26:17.625
And then lastly, it's the team culture.

00:26:18.654 --> 00:26:22.424
People need to be comfortable sharing
ideas and not be judged based on

00:26:22.425 --> 00:26:24.165
their comments and their feedback.

00:26:24.165 --> 00:26:28.775
So it's really important to have a
blameless culture when you're doing

00:26:28.795 --> 00:26:31.625
peer programming, if you want it
to be successful, because people,

00:26:32.605 --> 00:26:34.185
they need to know it's okay to fail.

00:26:34.185 --> 00:26:36.625
They need everybody to
assume positive intent.

00:26:36.935 --> 00:26:42.025
Everyone needs to extend trust and You
know, everyone needs to communicate,

00:26:42.025 --> 00:26:46.105
so you definitely want people to
feel comfortable pairing and sharing.

00:26:50.195 --> 00:26:53.924
As I conclude this talk and as you
contemplate the use of pair programming in

00:26:53.924 --> 00:26:57.334
your organization, I'd like to just share
a few final points for your consideration.

00:26:58.445 --> 00:27:04.305
One, pair programming has numerous
benefits as discussed today, but the only

00:27:04.305 --> 00:27:09.470
way for you to realize those benefits
and to see them It's to try it to.

00:27:10.100 --> 00:27:13.410
There's no one size fits all
when it comes to pair program.

00:27:13.420 --> 00:27:16.910
It really is about what works
for the individuals for the

00:27:16.910 --> 00:27:18.420
team or for the organization.

00:27:18.420 --> 00:27:23.500
So it's really about trying different
approaches and determining what's best.

00:27:24.460 --> 00:27:27.050
And lastly, just do it.

00:27:27.190 --> 00:27:28.160
Just try it out.

00:27:28.510 --> 00:27:33.030
Experiment to see what works and what
can be changed to make it better.

00:27:33.800 --> 00:27:36.809
Pair programming is an
iterative process and it takes

00:27:36.809 --> 00:27:38.170
practice like everything else.

00:27:39.135 --> 00:27:42.465
So, the sooner you try pair
programming, the sooner you, your

00:27:42.465 --> 00:27:47.255
team, your organization will start
benefiting from applying this practice.

00:27:50.525 --> 00:27:53.984
Here are some references with
additional information about the

00:27:53.985 --> 00:27:57.615
benefits and misconceptions of pair
programming that was discussed today.

00:27:57.630 --> 00:28:00.250
Um, and I'm going to share some of
my thoughts during today's talk.

00:28:00.250 --> 00:28:03.920
If you have questions, feel
free to reach out to me.

00:28:05.090 --> 00:28:11.690
And I must say, I want to take a moment
to acknowledge my team and say thank you.

00:28:12.020 --> 00:28:15.709
Thank you to my team who, who made
it possible for me to share our

00:28:15.709 --> 00:28:18.310
pair programming journey with you.

00:28:20.990 --> 00:28:23.500
And lastly, I want to thank
you all for joining me today.

00:28:24.290 --> 00:28:24.760
Thank you.

